"""Add photos table and relationship to observation

Revision ID: bc1efe6b5407
Revises: 117fb91af1ca
Create Date: 2024-10-16 20:07:28.908108

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'bc1efe6b5407'
down_revision: Union[str, None] = '117fb91af1ca'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def _has_table(table_name: str, schema: str | None = None) -> bool:
    bind = op.get_bind()
    insp = sa.inspect(bind)
    try:
        return insp.has_table(table_name, schema=schema)
    except TypeError:  # SQLAlchemy <2 signature
        return insp.has_table(table_name, schema)

def _has_index(table_name: str, index_name: str) -> bool:
    bind = op.get_bind()
    insp = sa.inspect(bind)
    return any(ix.get("name") == index_name for ix in insp.get_indexes(table_name))


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    if not _has_table('photos'):
        op.create_table(
            'photos',
            sa.Column('id', sa.BigInteger(), primary_key=True, autoincrement=True, nullable=False),
            sa.Column('url', sa.String(), nullable=False),
            sa.Column('observation_id', sa.BigInteger(), sa.ForeignKey('observations.id'), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('updated_at', sa.DateTime(), nullable=False),
        )
    if _has_table('photos') and not _has_index('photos', 'ix_photos_id'):
        op.create_index(op.f('ix_photos_id'), 'photos', ['id'], unique=False)
    # only drop column if it exists (in case it was already removed)
    bind = op.get_bind()
    insp = sa.inspect(bind)
    if any(c['name'] == 'photos' for c in insp.get_columns('observations')):
        op.drop_column('observations', 'photos')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Restore photos column only if missing
    bind = op.get_bind()
    insp = sa.inspect(bind)
    if not any(c['name'] == 'photos' for c in insp.get_columns('observations')):
        op.add_column('observations', sa.Column('photos', sa.VARCHAR(), nullable=True))
    # Drop index then table only if present
    if _has_index('photos', 'ix_photos_id'):
        op.drop_index(op.f('ix_photos_id'), table_name='photos')
    if _has_table('photos'):
        op.drop_table('photos')
    # ### end Alembic commands ###
